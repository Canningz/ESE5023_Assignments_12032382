#5.2
Total_solutions <-c()
for(x in 1:100){
Total_solutions[x] <- Find_expression(x)
}
print(Total_solutions)
barplot(Total_solutions,xlab = 'number',ylab = 'quantity',col = 'blue')
#5.1
Find_expression <- function(x){
a <-c(1,'',2,'',3,'',4,'',5,'',6,'',7,'',8,'',9)
b <- c('+','-','')
c <-permutations(3,8,b,set=TRUE, repeats.allowed=TRUE)
len_c <-length(c)/8
num <-0
for (i in 1:len_c) {
for (j in 1:8) {
a[2*j] <- c[i,j]
}
a1=paste(a,collapse = "")
value <- eval(parse(text=a1))
if(value == x){
val <-sprintf('=%d',x)
a2 <- c(a1,val)
a2 <- paste(a2, collapse = "")
print(a2)
num <- num+1
}
}
return(num)
}
Find_expression(50)
number1 <- Find_expression(50)
#5.2
Total_solutions <-c()
for(x in 1:100){
Total_solutions[x] <- Find_expression(x)
}
print(Total_solutions)
barplot(Total_solutions,xlab = 'number',ylab = 'quantity',col = 'blue')
10
10
10
#5.1
Find_expression <- function(x){
a <-c(1,'',2,'',3,'',4,'',5,'',6,'',7,'',8,'',9)
b <- c('+','-','')
c <-permutations(3,8,b,set=TRUE, repeats.allowed=TRUE)
len_c <-length(c)/8
num <-0
for (i in 1:len_c) {
for (j in 1:8) {
a[2*j] <- c[i,j]
}
a1=paste(a,collapse = "")
value <- eval(parse(text=a1))
if(value == x){
val <-sprintf('=%d',x)
a2 <- c(a1,val)
a2 <- paste(a2, collapse = "")
print(a2)
num <- num+1
}
}
return(num)
}
Find_expression(10)
number1 <- Find_expression(10)
#5.2
Total_solutions <-c()
for(x in 1:100){
Total_solutions[x] <- Find_expression(x)
}
print(Total_solutions)
barplot(Total_solutions,xlab = 'number',ylab = 'quantity',col = 'blue')
#5.1
Find_expression <- function(x){
a <-c(1,'',2,'',3,'',4,'',5,'',6,'',7,'',8,'',9)
b <- c('+','-','')
c <-permutations(3,8,b,set=TRUE, repeats.allowed=TRUE)
len_c <-length(c)/8
num <-0
for (i in 1:len_c) {
for (j in 1:8) {
a[2*j] <- c[i,j]
}
a1=paste(a,collapse = "")
value <- eval(parse(text=a1))
if(value == x){
val <-sprintf('=%d',x)
a2 <- c(a1,val)
a2 <- paste(a2, collapse = "")
print(a2)
num <- num+1
}
}
return(num)
}
Find_expression(10)
number1 <- Find_expression(10)
#5.2
Total_solutions <-c()
for(x in 1:100){
Total_solutions[x] <- Find_expression(x)
}
print(Total_solutions)
barplot(Total_solutions,xlab = 'number',ylab = 'quantity',col = 'blue')
Met_Data <- read.csv('20162020')
Met_Data <- read.csv('20162020')
Met_Data <- read.csv('20162020')
Met_Data <- read.csv('20162020')
Met_Data <- read.csv('20162020')
Met_Data <- read.csv('20162020')
Met_Data <- read.csv('20162020')
Met_Data <- read.xlsx('20162020')
#7.1
Met_Data <- read.csv(file = '20162020',header = T)
colnames(so2_data)
head(so2_data)
data_annan <- so2_data $ANNAN
data_710 <- so2_data $XCNAQ710
data_968 <- so2_data $XCNAQ968
data_annan[which(data_annan==-99999)] <- NA
data_710[which(data_710==-99999)] <- NA
data_968[which(data_968==-99999)] <- NA
#7.1
Met_Data <- read.csv(file = '20162020',header = T)
colnames(pressureindex)
head(pressureindex)
data_nyu <- pressureindex $NYU
data_caltech <- pressureindex $CALTech
data_mit <- pressureindex $MIT
data_nyu[which(data_nyu==-99999)] <- NA
data_caltech[which(data_caltech==-99999)] <- NA
data_mit[which(data_mit==-99999)] <- NA
#7.2
time_data <- pressureindex $Time
time_data1 <- as.Date(time_data)
plot(time_data1,data_710,col='blue',type='l')
Least_moves <- function(x){
move=0
while (x !=1) {
if(x%%2 == 0){
x <- x/2
move <- move + 1
}else{
x <- x-1
move <- move + 1
}
}
print(move)
}
Least_moves(5)
# Read the hourly data
Met_Data <- read.csv(file = "2281305.csv")
DV <- Met_Data$VIS
print(DV)
num=length(DV)
print(num)
# Get variation
range <- list()
dqc <- list()
vc <- list()
qvc <- list()
del_label <-c()
# Split the variation string
for(i in 1:num){
range()[i] <- as.numeric(substr(DV[i:i],1,6))
dqc[i] <- substr(DV[i:i],8,8)
vc[i] <- substr(DV[i:i],10,10)
qvc[i] <-substr(DV[i:i],12,12)
}
# Get the values of del_label
for (j in 1:num){
if (range[j] <0 | range[j]>160000 ){
del_label= c(del_label,j)
}
}
for (t in 1:num){
if (dqc[t] != '1' | vc[t] !='N' | qvc[t] != '1'){
del_label= c(del_label,t)
}
}
# Get the values of data_all_filter
data_vis3=DV[del_label]
data_all_filter=data[del_label]
print(length(data_all_filter))
# Split the variation string then Convert character to double
filter_dis <- list()
filter_num=length(data_vis3)
for (d in 1: filter_num ){
filter_dis[d] <- as.numeric(substr(data_vis3[d:d],1,6))
}
print(filter_num)
# Convert the character vector to date vector
Obs_Time = data_all_filter$DATE
print(length(Obs_Time))
Obs_Time <- Obs_Time[-del_label]
print(length(Obs_Time))
Obs_Time2=as.Date(Obs_Time)
# Plot
plot(Obs_Time2,filter_dis,lwd=0.5,type='l',col='blue')
#春天冬天的能见度较差，夏天秋天不好。可能是由于春冬季节供暖排放所致
#三年的数据成周期变化
#第二题
vis20100_5 <- 0
vis20105_10 <- 0
vis201010_15 <- 0
vis201015_20 <- 0
vis201020_25 <- 0
vis201025_30 <- 0
vis2010_30_ <- 0
vis20110_5 <- 0
vis20115_10 <- 0
vis201110_15 <- 0
vis201115_20 <- 0
vis201120_25 <- 0
vis201125_30 <- 0
vis2011_30_ <- 0
vis20120_5 <- 0
vis20125_10 <- 0
vis201210_15 <- 0
vis201215_20 <- 0
vis201220_25 <- 0
vis201225_30 <- 0
vis2012_30_ <- 0
vis20130_5 <- 0
vis20135_10 <- 0
vis201310_15 <- 0
vis201315_20 <- 0
vis201320_25 <- 0
vis201325_30 <- 0
vis2013_30_ <- 0
for(p in 1:98133){
if(2010 %in% as.numeric(substr(Obs_Time2[p],1,4)) == TRUE ){
if(filter_dis[p] < 5000){
vis20100_5 = vis2010_5 +1
}else if(filter_dis[p] < 10000){
vis20105_10 = vis201005_10 +1
}else if(filter_dis[p] < 15000){
vis201010_15 = vis201010_15 +1
}else if(filter_dis[p] < 20000){
vis201015_20 = vis201015_20 +1
}else if(filter_dis[p] < 25000){
vis201020_25 = vis201020_25 +1
}else if(filter_dis[p] < 30000){
vis201025_30 = vis201025_30 +1
}else {
vis2010_30_ = vis2010_30_ +1
}
}else if(2011 %in% as.numeric(substr(Obs_Time2[p],1,4)) == TRUE ){
if(filter_dis[p] < 5000){
vis20110_5 = vis20110_5 +1
}else if(filter_dis[p] < 10000){
vis20115_10 = vis20115_10 +1
}else if(filter_dis[p] < 15000){
vis201110_15 = vis201110_15 +1
}else if(filter_dis[p] < 20000){
vis201115_20 = vis201115_20 +1
}else if(filter_dis[p] < 25000){
vis201120_25 = vis201120_25 +1
}else if(filter_dis[p] < 30000){
vis201125_30 = vis201125_30 +1
}else {
vis2011_30_ = vis2011_30_ +1
}
}else if(2012 %in% as.numeric(substr(Obs_Time2[p],1,4)) == TRUE ){
if(filter_dis[p] < 5000){
vis20120_5 = vis20120_5 +1
}else if(filter_dis[p] < 10000){
vis20125_10 = vis20125_10 +1
}else if(filter_dis[p] < 15000){
vis201210_15 = vis201210_15 +1
}else if(filter_dis[p] < 20000){
vis201215_20 = vis201215_20 +1
}else if(filter_dis[p] < 25000){
vis201220_25 = vis201220_25 +1
}else if(filter_dis[p] < 30000){
vis201225_30 = vis201225_30 +1
}else {
vis2012_30_ = vis2012_30_ +1
}
}else if(2013 %in% as.numeric(substr(Obs_Time2[p],1,4)) == TRUE ){
if(filter_dis[p] < 5000){
vis20130_5 = vis20130_5 +1
}else if(filter_dis[p] < 10000){
vis20135_10 = vis20135_10 +1
}else if(filter_dis[p] < 15000){
vis201310_15 = vis201310_15 +1
}else if(filter_dis[p] < 20000){
vis201315_20 = vis201315_20 +1
}else if(filter_dis[p] < 25000){
vis201320_25 = vis201320_25 +1
}else if(filter_dis[p] < 30000){
vis201325_30 = vis201325_30 +1
}else {
vis2013_30_ = vis2013_30_ +1
}
}
}
colors <- c("pink","red","brown",'yellow','blue','green','orange')
years <- c("2010","2011","2012","2013")
regions <- c("vis0_5","vis5_10","vis10_15",'vis15_20','vis20_25','vis25_30','vis_30_')
# Create the matrix of the values.
Values <- matrix(c(vis20100_5,vis20110_5,vis20120_5,vis20130_5,
vis20105_10,vis20115_10,vis20125_10,vis20135_10,
vis201010_15,vis201110_15,vis201210_15,vis201310_15,
vis201015_20,vis201115_20,vis201215_20,vis201315_20,
vis201020_25,vis201120_25,vis201220_25,vis201320_25,
vis201025_30,vis201125_30,vis201225_30,vis201325_30,
vis2010_30_,vis2011_30_,vis2012_30_,vis2013_30_),
nrow=7,ncol=4,byrow=TRUE)
png(file = "2010-2013变化图.png")
barplot(Values,main="visibility of 2010-2013",names.arg=years,xlab="years",ylab="m",col=colors)
legend("topright", regions, cex=1.3, fill=colors)
dev.off()
#参考CSDN
#https://blog.csdn.net/g863402758/article/details/53389564
#https://zhu-group.github.io/ese5023/Section_03.html#Matrix_and_array
#黄锴
#5 Dynamic programming
#5.1
input <- as.integer(runif(1,1,100))
Find_expression <- function(input){
symbol <- c("+","-","")
symbols <- permutations(3,8,symbol, repeats.allowed = TRUE)
symbols <- cbind(symbols,"")
num <- matrix(seq(1,9,by = 1),9,6561)
num <- t(num)
equa <- matrix("",6561,1)
for( row in 1:6561 ){
symbol1 <- c(symbols[row,])
num1 <- c(num[row,])
equa[row,] <- paste(num1,symbol1,sep = "",collapse = "")
}
count <- 0
for( row in 1:6561 ){
ans <- eval(parse(text = equa[row]))
if (ans == input){
print (equa[row])
count <- count+1
}
}
return(count)
}
#5.2
Total_solutions <- matrix(0,100,1)
for (input in 1:100){
Total_solutions[input,]<- Find_expression(input)
}
plot(x = 1:100, y = Total_solutions,type = "l",)
maxnum = which(Total_solutions == max(Total_solutions))
minnum = which(Total_solutions == min(Total_solutions))
sprintf("%d yields the maximum of Total_solutions.", maxnum)
sprintf("%d yields the minimum of Total_solutions.", minnum)
#referto https://rosettacode.org/wiki/Sum_to_100
#referto 邱旺旺
#5 Dynamic programming
#5.1
library(gtools)
input <- as.integer(runif(1,1,100))
Find_expression <- function(input){
symbol <- c("+","-","")
symbols <- permutations(3,8,symbol, repeats.allowed = TRUE)
symbols <- cbind(symbols,"")
num <- matrix(seq(1,9,by = 1),9,6561)
num <- t(num)
equa <- matrix("",6561,1)
for( row in 1:6561 ){
symbol1 <- c(symbols[row,])
num1 <- c(num[row,])
equa[row,] <- paste(num1,symbol1,sep = "",collapse = "")
}
count <- 0
for( row in 1:6561 ){
ans <- eval(parse(text = equa[row]))
if (ans == input){
print (equa[row])
count <- count+1
}
}
return(count)
}
#5.2
Total_solutions <- matrix(0,100,1)
for (input in 1:100){
Total_solutions[input,]<- Find_expression(input)
}
plot(x = 1:100, y = Total_solutions,type = "l",)
maxnum = which(Total_solutions == max(Total_solutions))
minnum = which(Total_solutions == min(Total_solutions))
sprintf("%d yields the maximum of Total_solutions.", maxnum)
sprintf("%d yields the minimum of Total_solutions.", minnum)
#referto https://rosettacode.org/wiki/Sum_to_100
#referto 邱旺旺
Find_expression <- function(x){
a <-c(1,'',2,'',3,'',4,'',5,'',6,'',7,'',8,'',9)
b <- c('+','-','')
c <-permutations(3,8,b,set=TRUE, repeats.allowed=TRUE)
len_c <-length(c)/8
num <-0
for (i in 1:len_c) {
for (j in 1:8) {
a[2*j] <- c[i,j]
}
a1=paste(a,collapse = "")
value <- eval(parse(text=a1))
if(value == x){
val <-sprintf('=%d',x)
a2 <- c(a1,val)
a2 <- paste(a2, collapse = "")
print(a2)
num <- num+1
}
}
return(num)
}
Find_expression(10)
number1 <- Find_expression(10)
# 5.2
Total_solutions <-c()
for(x in 1:100){
Total_solutions[x] <- Find_expression(x)
}
print(Total_solutions)
plot(c(1:100),Total_solutions,main='Find_expression(x)',type='h',xlab = 'number',ylab = 'quantity',col = 'blue')
max(Total_solutions)
num_max =which(Total_solutions == max(Total_solutions))
print(num_max)
min(Total_solutions)
num_min =which(Total_solutions == min(Total_solutions))
print(num_min)
#7.1
Met_Data <- read.csv(file = '20162020',header = T)
colnames(pressureindex)
head(pressureindex)
data_nyu <- pressureindex $NYU
data_caltech <- pressureindex $CALTech
data_mit <- pressureindex $MIT
data_nyu[which(data_nyu==--10000)] <- NA
data_caltech[which(data_caltech==-10000)] <- NA
data_mit[which(data_mit==-10000)] <- NA
#7.2
time_data <- pressureindex $Time
time_data1 <- as.Date(time_data)
plot(time_data1,data_710,col='blue',type='l')
# Creating matrices
a <- sample(0:50,50)
print(a)
M1 <- matrix(data=a, nrow = 5, ncol = 10)
print(M1)
M2 <- matrix(data=a, nrow = 10, ncol = 5)
print(M2)
# Multiplying matrices
Matrix_multip <- function(M1,M2){
M=matrix(0,nrow = 5 , ncol = 5)
for(b in 1:5){
for (c in 1:5) {
for (d in 1:5) {
M[b,c] <- M[b,c] + M1[b,d]*M2[d,c]
}
}
}
print(M)
}
#验证
Matrix_multip(M1,M2)
M1%*%M2
#loop for pascal_triangle
Pascal_triangle <- function(k) {
Pas <- list()
for (ij in 1:(k+1)) {
Pas[[ij]] <- rep(1,ij)
}
if (k > 1) {
for (i in 3:(k+1)){
for (j in 2:(length(Pas[[i]])-1)){
Pas[[i]][j] <- Pas[[i-1]][j-1] + Pas[[i-1]][j]
}
}
}
return(Pas)
}
#Report Pascal_triangle(100)
k <- 100
for (i in 1:(k+1)){
for (j in 1:i){
cat(format(Pascal(k)[[i]][j], width = 5))
}
cat("\n")
}
#Repor Pascal_triangle(200)
k <- 200
for (i in 1:(k+1)){
for (j in 1:i){
cat(format(Pascal(k)[[i]][j], width = 5))
}
cat("\n")
}
Pascal_triangle <- function(k) {
Pas <- list()
for (ij in 1:(k+1)) {
Pas[[ij]] <- rep(1,ij)
}
if (k > 1) {
for (i in 3:(k+1)){
for (j in 2:(length(Pas[[i]])-1)){
Pas[[i]][j] <- Pas[[i-1]][j-1] + Pas[[i-1]][j]
}
}
}
return(Pas)
}
